name    = WomenInBotany
author  = Albert Schr√∂der <albert.schroeder@ur.de>
license = Perl_5
copyright_holder = Project Women in Botany
copyright_year   = 2013

abstract = WomeninBotany is a Web Application of a bibliographic database about Women in Botany

; version provider
[Git::NextVersion]  ; version by bumping the last git release tag

; choose files to include
[Git::GatherDir]    ; gather everting by git ls-files

[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; finders
[FileFinder::Filter / PodWeaverFiles] ; exclude modules created by dbicdump
finder = :InstallModules    ; find files from :InstallModules
finder = :ExecFiles         ; or :ExecFiles
skip  =  /Schema/Result/    ; exclude result source modules
skip  =  /Schema\.pm$       ; exclude module Schema.pm

; file modifications
[Encoding]
encoding = bytes
match = ^t/var/womeninbotany\.db$

[PkgVersion]    ; add $VERSION to module

[PodWeaver]     ; generate Pod
finder = PodWeaverFiles    ; add documentation to these files

; generated files
[MetaYAML]          ; generate META.yml
[License]           ; boilerplate license
[Readme]            ; build a README file

[ReadmeAnyFromPod]  ; generate README.md
type = markdown
filename = README.md
location = build

;xt tests
[PodSyntaxTests]
;[PodCoverageTests]
;[Test::Perl::Critic]

; metadata
[AutoPrereqs]       ; add all prereqs automatically

[Prereqs]
Catalyst::Plugin::StatusMessage = 0
Catalyst::Plugin::Session::Store::FastMmap = 0
Catalyst::Plugin::Authorization::Roles = 0
CatalystX::SimpleLogin = 0
Catalyst::Authentication::Store::LDAP = 0
Catalyst::Authentication::Store::DBIx::Class = 0

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires

; build system
[ExtraTests]
[ExecDir]           ; add authordeps as develop/requires
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; before release
[Git::CheckFor::CorrectBranch] ; ensure on master branch

[Git::Check]        ; ensure all files checked in

[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading

; release
[FakeRelease]       ; pretend to do [UploadToCPAN]

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)

[Git::Tag]          ; tag repo with custom tag

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin
push_to = github

